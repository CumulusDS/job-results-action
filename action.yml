name: 'cfn-lint-action'
description: 'executes cfn-lint'
inputs:
  token:
    description: 'github token with API access'
    required: true
    default: ''
  matrix:
    description: 'matrix of jobs to get status of from previous jobs'
    required: true
    default: ''
  failureIcon:
    description: 'icon for slack messages if to be used in future actions'
    required: false
    default: ':dumpsterfire:'
  successIcon:
    description: 'icon for slack messages if to be used in future actions'
    required: false
    default: ':white_check_mark:'
#outputs:
#  totalJobs:
#    description: "jobs results"
#    value: "${{ steps.jobs.outputs.totalJobs }}"
#  jobs:
#    description: "jobs results"
#    value: "${{ steps.jobs.outputs.jobs }}"
#  jobsSteps:
#    description: "jobs results"
#    value: "${{ steps.jobs.outputs.resultsSteps }}"
runs:
  using: "composite"
  steps:
    - name: jobs context
      id: jobs
      run: |
        version=$((echo ${{ github.ref }}) | sed 's/^..........//')
        echo "VERSION=$version" >> $GITHUB_ENV
        echo "REPO=$((echo ${{ github.repository }}) | sed 's/^..........//')" >> $GITHUB_ENV
        JOBS=$( \
          curl -s -H 'Authorization: token ${{ inputs.token }}' \
          -L https://api.github.com/repos/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}/jobs \
        )
        info=$(
          echo $JOBS | jq '.jobs[] | {name: .name, status: .status, conclusion: .conclusion, url: .html_url}' \
          | jq -s '.'
        )
        results=$(echo $info | jq -r '.')

        # grab a random fact
        randomFact=$(curl -s https://uselessfacts.jsph.pl/random.txt\?language\=en | head -n1 | sed s'/> //')
        echo "randomFact=${randomFact}" >> $GITHUB_ENV

        echo "::group::changelog URL"
        curl -s -H 'Authorization: token ${{ inputs.token }}' -L https://api.github.com/repos/CumulusDS/sts-pipeline/releases | jq -r --arg version "v1.5.1" '.[] | select(.tag_name==$version)'
        echo "::endgroup::"

        #notes=$(curl -s -H 'Authorization: token ${{ inputs.token }}' -L https://api.github.com/repos/${{ github.repository }}/releases | jq -r --arg version "$version" '.[] | select(.tag_name==$version) | .body')
        notes=$(curl -s -H 'Authorization: token ${{ inputs.token }}' -L https://api.github.com/repos/CumulusDS/sts-pipeline/releases | jq -r --arg version "v1.5.1" '.[] | select(.tag_name==$version) | .body')
        IFSBAK=$IFS && IFS=" "
        echo "fromApi<<EOF" >> $GITHUB_ENV
        echo $notes >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV
        IFS=$IFSBAK
        #changelog_url=$(curl -s -H 'Authorization: token ${{ inputs.token }}' -L https://api.github.com/repos/${{ github.repository }}/releases | jq -r --arg version "$version" '.[] | select(.tag_name==$version) | .html_url')
        changelog_url=$(curl -s -H 'Authorization: token ${{ inputs.token }}' -L https://api.github.com/repos/CumulusDS/sts-pipeline/releases | jq -r --arg version "v1.5.1" '.[] | select(.tag_name==$version) | .html_url')
        echo "changelogAddress=${changelog_url}" >> $GITHUB_ENV

        echo "::group::Jobs context"
        echo ${results} | jq -r '.'
        echo "::endgroup::"

        #echo "::group::Set results environment variable"
        echo "results<<EOF" >> $GITHUB_ENV
        echo ${results} >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV
        #echo "::endgroup::"

        echo "::group::How many jobs"
        job_length=$(echo $info | jq length)
        echo "${job_length} total jobs"
        echo "totalJobs=$job_length" >> $GITHUB_ENV
        echo "::endgroup::"

        echo "::group::Matrix Context"
        matrixJson=$(echo ${{ inputs.matrix }} | jq '.')
        echo "Jobs matrix passed in:"
        echo $matrixJson | jq -r '.'
        echo "::endgroup::"

        echo "::group::check for includes"
        if [[ $(echo matrixJson | jq -r '.include?') = null ]]; then
          echo "JSON object does not contain 'include' key."
          matrixJsonLength=$(echo $matrixJson | jq length)
          echo "Matrix has ${matrixJsonLength} objects."
        else
          echo "JSON object has 'include' key."
          matrixJsonLength=$(echo $matrixJson | jq -r '.include' | jq length)
          echo "Matrix includes has ${matrixJsonLength} objects."
          matrixJson=$(echo $matrixJson | jq -r '.include')
        fi
        echo "::endgroup::"

        echo "::group::the rest"
        i=0 && resultsArray=() && statusMessage=$'\n'
        while [ $i -lt $matrixJsonLength ]; do
          valuesArray=($(echo $matrixJson | jq -r --argjson index $i '.[$index] | to_entries | .[] | .value'))
          j=0
          while [ $j -lt $job_length ]; do
            if [[ ! -z $(echo $results | jq --argjson jndex $j '.[$jndex].name' | awk "$(echo "${valuesArray[@]}" | sed 's/^/\//g;s/$/\//g;s/ /\/ \&\& \//g')") ]]; then
              name=$(echo $results | jq -r --argjson jndex $j '.[$jndex].name' | tr ' ' '_' | sed -e 's/(//' -e 's/)//')
              region=${valuesArray[0]}
              stage=${valuesArray[1]}
              result=$(echo $results | jq -r --argjson jndex $j '.[$jndex].conclusion')
              url=$(echo $results | jq -r --argjson jndex $j '.[$jndex].url')

              if [ "$result" == "success" ]; then
                icon=${{ inputs.successIcon }}
              elif [ "$result" == "failure" ]; then
                icon=${{ inputs.failureIcon }}
              else
                echo "job cancelled?"
              fi
              message="${icon} ${region} ${stage}: *<${url}|${result}>*"
              statusMessage="${statusMessage}"$'\n'"${message}"$'\n'$'\n'
            fi
            j=$((j+1))
          done
          i=$((i+1))
        done
        echo "statusMessage<<EOF" >> $GITHUB_ENV
        echo "$statusMessage" >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV
        echo "::endgroup::"
      shell: bash
