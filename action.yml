name: 'cfn-lint-action'
description: 'executes cfn-lint'
inputs:
  token:
    description: 'github token with API access'
    required: true
    default: ''
  matrix:
    description: 'matrix of jobs to look for'
    required: false
    default: ''
  failureIcon:
    description: 'icon for slack messages if to be used in future actions'
    required: false
    default: ':dumpsterfire:'
  successIcon:
    description: 'icon for slack messages if to be used in future actions'
    required: false
    default: ':white_check_mark:'
#outputs:
#  totalJobs:
#    description: "jobs results"
#    value: "${{ steps.jobs.outputs.totalJobs }}"
#  jobs:
#    description: "jobs results"
#    value: "${{ steps.jobs.outputs.jobs }}"
#  jobsSteps:
#    description: "jobs results"
#    value: "${{ steps.jobs.outputs.resultsSteps }}"
runs:
  using: "composite"
  steps:
    - name: matrix check
      run: |
        echo "::group::Matrix check"
        if [[ -z "${{ inputs.matrix }}" ]]; then
          echo "no matrix is set"
          echo "matrixExists=false" >> $GITHUB_ENV
        else
          echo "matrix is set"
          echo "matrixExists=true" >> $GITHUB_ENV
        fi
        echo ""
        echo "::endgroup::"
      shell: bash
    - name: jobs context
      id: jobs
      run: |
        version=$((echo ${{ github.ref }}) | sed 's/^..........//')
        echo "VERSION=$version" >> $GITHUB_ENV
        echo "REPO=$((echo ${{ github.repository }}) | sed 's/^..........//')" >> $GITHUB_ENV
        JOBS=$( \
          curl -s -H 'Authorization: token ${{ inputs.token }}' \
          -L https://api.github.com/repos/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}/jobs \
        )
        info=$(
          echo $JOBS | jq '.jobs[] | {name: .name, status: .status, conclusion: .conclusion, url: .html_url}' \
          | jq -s '.'
        )
        results=$(echo $info | jq -r '.')

        randomFact=$(curl -s https://uselessfacts.jsph.pl/random.txt\?language\=en | head -n1)
        echo "randomFact=${randomFact}" >> $GITHUB_ENV

        notes=$(curl -s -H 'Authorization: token ${{ inputs.token }}' -L https://api.github.com/repos/${{ github.repository }}/releases | jq -r --arg version "$version" '.[] | select(.tag_name==$version) | .body')
        IFSBAK=$IFS && IFS=" "
        echo "fromApi<<EOF" >> $GITHUB_ENV
        echo $notes >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV
        IFS=$IFSBAK

        echo "::group::Jobs context"
        echo ${results} | jq -r '.'
        echo "::endgroup::"

        #echo "::group::Set results environment variable"
        echo "results<<EOF" >> $GITHUB_ENV
        echo ${results} >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV
        #echo "::endgroup::"

        echo "::group::How many jobs"
        job_length=$(echo $info | jq length)
        echo "${job_length} total jobs"
        #echo "::set-output name=totalJobs::$(echo "$job_length")"
        echo "totalJobs=$job_length" >> $GITHUB_ENV
        echo "::endgroup::"

        if [ ${{ env.matrixExists }} = true ]; then
          echo "::group::Matrix Context"
          matrixJson=$(echo ${{ inputs.matrix }} | jq '.')
          echo "Jobs matrix passed in:"
          echo $matrixJson | jq -r '.'
          echo ""

          if [[ $(echo matrixJson | jq -r '.include?') = null ]]; then
            echo "JSON object does not contain 'include' key."
            matrixJsonLength=$(echo $matrixJson | jq length)
            echo "Matrix has ${matrixJsonLength} objects."
          else
            echo "JSON object has 'include' key."
            matrixJsonLength=$(echo $matrixJson | jq -r '.include' | jq length)
            echo "Matrix includes has ${matrixJsonLength} objects."
            matrixJson=$(echo $matrixJson | jq -r '.include')
          fi
          echo ""

          i=0 && resultsArray=() && statusMessage=""
          while [ $i -lt $matrixJsonLength ]; do
            echo "****************************************************************************"
            #echo "Matrix index ${i} "
            #echo "******************"
            echo ""
            valuesArray=($(echo $matrixJson | jq -r --argjson index $i '.[$index] | to_entries | .[] | .value'))
            j=0
            while [ $j -lt $job_length ]; do
              #echo "Job index ${j}"
              #echo $results | jq --argjson jndex $j '.[$jndex]'

              if [[ ! -z $(echo $results | jq --argjson jndex $j '.[$jndex].name' | awk "$(echo "${valuesArray[@]}" | sed 's/^/\//g;s/$/\//g;s/ /\/ \&\& \//g')") ]]; then
                name=$(echo $results | jq -r --argjson jndex $j '.[$jndex].name' | tr ' ' '_' | sed -e 's/(//' -e 's/)//')
                region=${valuesArray[0]}
                stage=${valuesArray[1]}
                result=$(echo $results | jq -r --argjson jndex $j '.[$jndex].conclusion')
                url=$(echo $results | jq -r --argjson jndex $j '.[$jndex].url')

                if [ "$result" == "success" ]; then
                  icon=${{ inputs.successIcon }}
                  #echo "${name}_icon=$icon" >> $GITHUB_ENV
                elif [ "$result" == "failure" ]; then
                  icon=${{ inputs.failureIcon }}
                  #echo "${name}_icon=$icon" >> $GITHUB_ENV
                else
                  echo "job cancelled?"
                fi
                #echo "Name:    $name"
                #echo "Result:  $result"
                #echo "URL:     $url"
                #echo "${name}_result=$result" >> $GITHUB_ENV
                #echo "${name}_url=$url" >> $GITHUB_ENV
                #echo "Icon:    $icon"
                #echo ""
                message="${icon} ${region} ${stage}: *<${url}|${result}>*"
                statusMessage="${statusMessage}"$'\n'"${message}"$'\n'$'\n'
                echo ""
              fi
              j=$((j+1))
            done
            i=$((i+1))
          done

          echo ""
          echo ""
          echo "Slack Deployment Status Message"
          echo "${statusMessage}"

          #IFSBAK=$IFS && IFS=" "
          echo "statusMessage<<EOF" >> $GITHUB_ENV
          echo "$statusMessage" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
          #IFS=$IFSBAK
          #echo "statusMessage=${statusMessage}" >> $GITHUB_ENV
          echo "::endgroup::"
        else
          echo "::group::set environment variables per job"
          i=0
          while [ $i -lt $job_length ]; do
            echo "Job at index ${i}"
            echo $info | jq --argjson index $i '.[$index]'

            name=$(echo $info | jq -r --argjson index $i '.[$index].name' | tr ' ' '_' | sed -e 's/(//' -e 's/)//')
            result=$(echo $info | jq -r --argjson index $i '.[$index].conclusion')
            url=$(echo $info | jq -r --argjson index $i '.[$index].url')

            echo "Name:    $name"
            echo "Result:  $result"
            echo "URL:     $url"
            echo "${name}_result=$result" >> $GITHUB_ENV
            echo "${name}_url=$url" >> $GITHUB_ENV
            echo ""
            echo ""
            i=$((i+1))
          done
          echo "::endgroup::"
        fi
      shell: bash
